local CONFIG_FILENAME = "Patinzera_AutoBuyConfig.json" -- Predefined list of Things (edit names/rarities as you want) -- rarity values: "Common","Rare","Epic","Legendary","Mythical","God","Secret" local PREDEFINED_THINGS = { -- Common { name = "Makaka", rarity = "Common" }, { name = "Xiao Xiao", rarity = "Common" }, { name = "Paulette", rarity = "Common" }, { name = "Puchaina", rarity = "Common" }, { name = "Chokar", rarity = "Common" }, -- Rare { name = "Vaninha", rarity = "Rare" }, { name = "The Frog", rarity = "Rare" }, { name = "Francisquinho", rarity = "Rare" }, { name = "She C√¥", rarity = "Rare" }, { name = "Chuu", rarity = "Rare" }, -- Epic { name = "Val√©ria Almeida", rarity = "Epic" }, { name = "Dona Elsa", rarity = "Epic" }, { name = "Baddie Fenix", rarity = "Epic" }, { name = "Lemonade Mouth", rarity = "Epic" }, { name = "Hyperpigmentation", rarity = "Epic" }, -- Legendary { name = "Tucanna", rarity = "Legendary" }, { name = "Cururu Lacrador", rarity = "Legendary" }, { name = "Ol√° Gostaria", rarity = "Legendary" }, { name = "Mc Divertida", rarity = "Legendary" }, { name = "Juju do Pix", rarity = "Legendary" }, -- Mythical { name = "Rayanne", rarity = "Mythical" }, { name = "Fernanda Coxa", rarity = "Mythical" }, { name = "Jabiraca", rarity = "Mythical" }, -- God { name = "Cupcake", rarity = "God" }, { name = "Sister Hong", rarity = "God" }, { name = "Anitta Penywise", rarity = "God" }, { name = "Sigilo Perigoso", rarity = "God" }, { name = "MMs", rarity = "God" }, { name = "Sayonara Queen", rarity = "God" }, -- Secret { name = "Maria Jos√©", rarity = "Secret" }, { name = "Big Big", rarity = "Secret" }, { name = "Jiafei", rarity = "Secret" }, { name = "Saori", rarity = "Secret" }, { name = "Agatha Nunes", rarity = "Secret" }, { name = "Ygona", rarity = "Secret" }, { name = "FlopGod/Combinassion", rarity = "Secret" }, } -- Rarity colors (RGB 0-255) local RARITY_COLORS = { Common = Color3.fromRGB(150, 150, 150), -- grey Rare = Color3.fromRGB(0, 200, 80), -- green Epic = Color3.fromRGB(160, 60, 200), -- purple Legendary = Color3.fromRGB(240, 200, 20), -- yellow Mythical = Color3.fromRGB(220, 40, 40), -- red God = Color3.fromRGB(170, 120, 255), -- light purple Secret = { Color3.fromRGB(255,255,255), Color3.fromRGB(0,0,0) } -- white & black theme } -- ///////////////////////////// -- // UTIL: JSON & FILE IO (safe) -- ///////////////////////////// local HttpService = game:GetService("HttpService") local function safeJSONEncode(tbl) local ok, res = pcall(function() return HttpService:JSONEncode(tbl) end) if ok then return res else return nil end end local function safeJSONDecode(s) local ok, res = pcall(function() return HttpService:JSONDecode(s) end) if ok then return res else return nil end end local function canWriteFile() return type(writefile) == "function" end local function canReadFile() return type(readfile) == "function" end local function saveConfig(cfg) local encoded = safeJSONEncode(cfg) if not encoded then return false, "JSON encode failed" end if canWriteFile() then local ok, err = pcall(function() writefile(CONFIG_FILENAME, encoded) end) if ok then return true else return false, tostring(err) end else -- fallback: try to store in _G (session only) _G.Patinzera_AutoBuy_SessionConfig = encoded return true, "Saved to session fallback" end end local function loadConfig() if canReadFile() then local ok, content = pcall(function() return readfile(CONFIG_FILENAME) end) if not ok then return nil end local decoded = safeJSONDecode(content) return decoded else -- fallback to session _G if _G.Patinzera_AutoBuy_SessionConfig then return safeJSONDecode(_G.Patinzera_AutoBuy_SessionConfig) end end return nil end -- ///////////////////////////// -- // STATE -- ///////////////////////////// local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local TweenService = game:GetService("TweenService") local RunService = game:GetService("RunService") local running = false local speed = 25 -- studs per second used only for tween duration calc local knownThings = {} -- [Instance] = true local activeTarget = nil -- config state (selected items) local config = { selected = {}, -- [thingName] = true speed = speed } -- initialize selected from PREDEFINED_THINGS (by default false) for _, t in ipairs(PREDEFINED_THINGS) do config.selected[t.name] = config.selected[t.name] or false end -- load saved config if exists local saved = loadConfig() if saved and type(saved) == "table" then if saved.selected and type(saved.selected) == "table" then for k, v in pairs(saved.selected) do config.selected[k] = v end end if saved.speed and type(saved.speed) == "number" then config.speed = saved.speed speed = saved.speed end end -- ///////////////////////////// -- // UI Helpers -- ///////////////////////////// local function make(parent, cls) local obj = Instance.new(cls) obj.Parent = parent return obj end -- main ScreenGui local ScreenGui = make(game.CoreGui, "ScreenGui") ScreenGui.Name = "PatinzeraAutoBuyUI" -- Main Frame local Frame = make(ScreenGui, "Frame") Frame.Size = UDim2.new(0, 380, 0, 300) Frame.Position = UDim2.new(0.28, 0, 0.22, 0) Frame.BackgroundColor3 = Color3.fromRGB(8, 18, 12) -- dark greenish Frame.BorderSizePixel = 0 Frame.Active = true Frame.Draggable = true local fc = make(Frame, "UICorner"); fc.CornerRadius = UDim.new(0, 12) local Title = make(Frame, "TextLabel") Title.Size = UDim2.new(1, 0, 0, 36) Title.BackgroundTransparency = 1 Title.Font = Enum.Font.GothamBold Title.Text = "‚ö° AutoBuy (Patinzera)" Title.TextColor3 = Color3.fromRGB(0, 255, 120) Title.TextSize = 20 local Status = make(Frame, "TextLabel") Status.Size = UDim2.new(1, 0, 0, 22) Status.Position = UDim2.new(0, 0, 0, 36) Status.BackgroundTransparency = 1 Status.Font = Enum.Font.Gotham Status.Text = "Status: STOPPED" Status.TextColor3 = Color3.fromRGB(255, 80, 80) Status.TextSize = 14 local InputBox = make(Frame, "TextBox") InputBox.Size = UDim2.new(0.9, 0, 0, 30) InputBox.Position = UDim2.new(0.05, 0, 0, 66) InputBox.PlaceholderText = "Type names separated by comma (or leave blank to use selected list)" InputBox.Font = Enum.Font.Gotham InputBox.TextSize = 14 InputBox.TextColor3 = Color3.new(1,1,1) InputBox.BackgroundColor3 = Color3.fromRGB(12, 40, 14) make(InputBox, "UICorner").CornerRadius = UDim.new(0,8) local StartButton = make(Frame, "TextButton") StartButton.Size = UDim2.new(0.43, 0, 0, 36) StartButton.Position = UDim2.new(0.05, 0, 0, 106) StartButton.Text = "‚ñ∂ Start" StartButton.Font = Enum.Font.GothamBold StartButton.TextSize = 16 StartButton.TextColor3 = Color3.fromRGB(0, 255, 100) StartButton.BackgroundColor3 = Color3.fromRGB(0, 50, 0) make(StartButton, "UICorner").CornerRadius = UDim.new(0,8) local StopButton = make(Frame, "TextButton") StopButton.Size = UDim2.new(0.43, 0, 0, 36) StopButton.Position = UDim2.new(0.52, 0, 0, 106) StopButton.Text = "‚ñ† Stop" StopButton.Font = Enum.Font.GothamBold StopButton.TextSize = 16 StopButton.TextColor3 = Color3.fromRGB(255, 80, 80) StopButton.BackgroundColor3 = Color3.fromRGB(50, 0, 0) make(StopButton, "UICorner").CornerRadius = UDim.new(0,8) local OpenListButton = make(Frame, "TextButton") OpenListButton.Size = UDim2.new(0.9, 0, 0, 28) OpenListButton.Position = UDim2.new(0.05, 0, 0, 150) OpenListButton.Text = "Open List" OpenListButton.Font = Enum.Font.Gotham OpenListButton.TextSize = 14 OpenListButton.TextColor3 = Color3.fromRGB(190, 255, 190) OpenListButton.BackgroundColor3 = Color3.fromRGB(12, 30, 12) make(OpenListButton, "UICorner").CornerRadius = UDim.new(0,8) local LogBox = make(Frame, "ScrollingFrame") LogBox.Size = UDim2.new(0.9, 0, 0, 80) LogBox.Position = UDim2.new(0.05, 0, 0, 186) LogBox.BackgroundColor3 = Color3.fromRGB(6, 12, 6) LogBox.BorderSizePixel = 0 LogBox.ScrollBarThickness = 6 make(LogBox, "UICorner").CornerRadius = UDim.new(0,8) local Logs = make(LogBox, "TextLabel") Logs.Size = UDim2.new(1, -8, 1, 0) Logs.Position = UDim2.new(0,4,0,0) Logs.BackgroundTransparency = 1 Logs.TextColor3 = Color3.fromRGB(180, 255, 200) Logs.Font = Enum.Font.Code Logs.TextSize = 14 Logs.Text = "[Patinzera] Ready." Logs.TextYAlignment = Enum.TextYAlignment.Top Logs.TextWrapped = true local Footer = make(Frame, "TextLabel") Footer.Size = UDim2.new(1, 0, 0, 18) Footer.Position = UDim2.new(0, 0, 1, -20) Footer.BackgroundTransparency = 1 Footer.Text = "üí° Patinzera" Footer.Font = Enum.Font.Gotham Footer.TextSize = 12 Footer.TextColor3 = Color3.fromRGB(0, 200, 100) -- SUBGUI: list panel (initially hidden) local ListPanel = make(ScreenGui, "Frame") ListPanel.Size = UDim2.new(0, 340, 0, 360) ListPanel.Position = UDim2.new(0.7, 0, 0.2, 0) ListPanel.BackgroundColor3 = Color3.fromRGB(6, 14, 8) ListPanel.BorderSizePixel = 0 ListPanel.Visible = false make(ListPanel, "UICorner").CornerRadius = UDim.new(0,12) local LP_Title = make(ListPanel, "TextLabel") LP_Title.Size = UDim2.new(1,0,0,34) LP_Title.BackgroundTransparency = 1 LP_Title.Font = Enum.Font.GothamBold LP_Title.Text = "Things List (select which to AutoBuy)" LP_Title.TextColor3 = Color3.fromRGB(170,255,190) LP_Title.TextSize = 16 local CloseListBtn = make(ListPanel, "TextButton") CloseListBtn.Size = UDim2.new(0.28,0,0,28) CloseListBtn.Position = UDim2.new(0.7,0,0.02,0) CloseListBtn.Text = "Close" CloseListBtn.Font = Enum.Font.Gotham CloseListBtn.TextSize = 14 CloseListBtn.TextColor3 = Color3.fromRGB(200,200,200) CloseListBtn.BackgroundColor3 = Color3.fromRGB(12,12,12) make(CloseListBtn, "UICorner").CornerRadius = UDim.new(0,8) local SelectAllBtn = make(ListPanel, "TextButton") SelectAllBtn.Size = UDim2.new(0.3,0,0,28) SelectAllBtn.Position = UDim2.new(0.02,0,0.02,0) SelectAllBtn.Text = "Select All" SelectAllBtn.Font = Enum.Font.Gotham SelectAllBtn.TextSize = 14 SelectAllBtn.TextColor3 = Color3.fromRGB(200,200,200) SelectAllBtn.BackgroundColor3 = Color3.fromRGB(6,60,6) make(SelectAllBtn, "UICorner").CornerRadius = UDim.new(0,8) local DeselectAllBtn = make(ListPanel, "TextButton") DeselectAllBtn.Size = UDim2.new(0.3,0,0,28) DeselectAllBtn.Position = UDim2.new(0.34,0,0.02,0) DeselectAllBtn.Text = "Deselect All" DeselectAllBtn.Font = Enum.Font.Gotham DeselectAllBtn.TextSize = 14 DeselectAllBtn.TextColor3 = Color3.fromRGB(200,200,200) DeselectAllBtn.BackgroundColor3 = Color3.fromRGB(60,6,6) make(DeselectAllBtn, "UICorner").CornerRadius = UDim.new(0,8) local SaveBtn = make(ListPanel, "TextButton") SaveBtn.Size = UDim2.new(0.3,0,0,28) SaveBtn.Position = UDim2.new(0.66,0,0.02,0) SaveBtn.Text = "Save" SaveBtn.Font = Enum.Font.Gotham SaveBtn.TextSize = 14 SaveBtn.TextColor3 = Color3.fromRGB(200,200,200) SaveBtn.BackgroundColor3 = Color3.fromRGB(8,40,8) make(SaveBtn, "UICorner").CornerRadius = UDim.new(0,8) local ListScroll = make(ListPanel, "ScrollingFrame") ListScroll.Size = UDim2.new(0.96,0,0,292) ListScroll.Position = UDim2.new(0.02,0,0.07,0) ListScroll.BackgroundTransparency = 1 ListScroll.ScrollBarThickness = 6 -- container for item rows local ListLayout = make(ListScroll, "UIListLayout") ListLayout.Padding = UDim.new(0,6) ListLayout.SortOrder = Enum.SortOrder.LayoutOrder ListScroll.CanvasSize = UDim2.new(0,0,0,0) -- ///////////////////////////// -- // LOG helper -- ///////////////////////////// local function log(msg) if not Logs or not Logs.Parent then return end Logs.Text = Logs.Text .. "\n" .. "[" .. os.date("%X") .. "] " .. tostring(msg) -- update canvas size pcall(function() LogBox.CanvasSize = UDim2.new(0,0,0,Logs.TextBounds.Y + 8) end) end -- ///////////////////////////// -- // LIST UI: build rows for PREDEFINED_THINGS and dynamic additions -- ///////////////////////////// local rows = {} -- name -> {Frame, Checkbox, ColorBox, Label} local function createRow(item) local name = item.name local rarity = item.rarity or "Common" local rowFrame = make(ListScroll, "Frame") rowFrame.Size = UDim2.new(1, -8, 0, 34) rowFrame.BackgroundTransparency = 1 local cb = make(rowFrame, "TextButton") cb.Size = UDim2.new(0, 34, 0, 34) cb.Position = UDim2.new(0, 0, 0, 0) cb.Text = (config.selected[name] and "‚úî" or "") cb.Font = Enum.Font.GothamBold cb.TextSize = 18 cb.TextColor3 = Color3.fromRGB(30,250,100) cb.BackgroundColor3 = Color3.fromRGB(12, 20, 12) make(cb, "UICorner").CornerRadius = UDim.new(0,6) local colorBox = make(rowFrame, "Frame") colorBox.Size = UDim2.new(0, 12, 0, 12) colorBox.Position = UDim2.new(0, 38, 0, 11) colorBox.BorderSizePixel = 0 make(colorBox, "UICorner").CornerRadius = UDim.new(0,3) -- handle secret specially (white/black) if rarity == "Secret" then -- create a subtle border effect (white bg + black border frame) colorBox.BackgroundColor3 = RARITY_COLORS.Secret[1] local inner = make(colorBox, "Frame") inner.Size = UDim2.new(1, -4, 1, -4) inner.Position = UDim2.new(0, 2, 0, 2) inner.BackgroundColor3 = RARITY_COLORS.Secret[2] inner.BorderSizePixel = 0 make(inner, "UICorner").CornerRadius = UDim.new(0,2) else colorBox.BackgroundColor3 = RARITY_COLORS[rarity] or RARITY_COLORS.Common end local label = make(rowFrame, "TextLabel") label.Size = UDim2.new(0.8, -48, 1, 0) label.Position = UDim2.new(0, 56, 0, 0) label.BackgroundTransparency = 1 label.Font = Enum.Font.Gotham label.TextSize = 14 label.TextColor3 = Color3.fromRGB(220, 255, 220) label.TextXAlignment = Enum.TextXAlignment.Left label.Text = name .. " (" .. rarity .. ")" -- click handler cb.MouseButton1Click:Connect(function() config.selected[name] = not config.selected[name] cb.Text = config.selected[name] and "‚úî" or "" -- auto save (best-effort) local ok, err = saveConfig(config) if ok then log("Saved selection change for "..name) end end) rows[name] = { frame = rowFrame, checkbox = cb, label = label, colorBox = colorBox, rarity = rarity } return rowFrame end -- build initial rows from PREDEFINED_THINGS for _, it in ipairs(PREDEFINED_THINGS) do createRow(it) end -- adjust canvas size helper local function refreshCanvas() pcall(function() ListScroll.CanvasSize = UDim2.new(0,0,0, ListLayout.AbsoluteContentSize.Y + 12) end) end refreshCanvas() -- selection buttons SelectAllBtn.MouseButton1Click:Connect(function() for name, r in pairs(rows) do config.selected[name] = true r.checkbox.Text = "‚úî" end saveConfig(config) log("Selected all Things.") end) DeselectAllBtn.MouseButton1Click:Connect(function() for name, r in pairs(rows) do config.selected[name] = false r.checkbox.Text = "" end saveConfig(config) log("Deselected all Things.") end) SaveBtn.MouseButton1Click:Connect(function() local ok, err = saveConfig(config) if ok then log("Config saved to "..CONFIG_FILENAME) else log("Save failed: "..tostring(err)) end end) CloseListBtn.MouseButton1Click:Connect(function() ListPanel.Visible = false OpenListButton.Text = "Open List" end) OpenListButton.MouseButton1Click:Connect(function() ListPanel.Visible = not ListPanel.Visible OpenListButton.Text = ListPanel.Visible and "Close List" or "Open List" end) -- ///////////////////////////// -- // AUTO DETECTION: add any items from workspace:Things into the list (if missing) -- ///////////////////////////// local function addThingToListIfMissing(inst) if not inst or not inst:IsA("Instance") then return end local name = inst.Name -- skip duplicates if rows[name] then return end -- attempt to infer rarity from attributes or from descendant named "Rarity" local rarity = "Common" local foundR = false -- check attributes if inst:GetAttribute("Rarity") then rarity = tostring(inst:GetAttribute("Rarity")) foundR = true end -- check child named "Rarity" if not foundR then local c = inst:FindFirstChild("Rarity") if c and c:IsA("StringValue") then rarity = c.Value foundR = true end end -- create new row local newItem = { name = name, rarity = rarity } createRow(newItem) refreshCanvas() log("Added dynamic Thing to list: "..name.." (rarity: "..rarity..")") end -- scan once spawn(function() task.wait(0.8) local thingsFolder = workspace:FindFirstChild("Things") if thingsFolder then for _, child in ipairs(thingsFolder:GetChildren()) do addThingToListIfMissing(child) end end end) -- watch for new Things workspace.ChildAdded:Connect(function(ch) if ch and ch.Name == "Things" then -- new folder created; scan children for _, c in ipairs(ch:GetChildren()) do addThingToListIfMissing(c) end elseif ch and ch.Parent == workspace and ch.Name ~= "StarterPack" then -- unrelated top-level add; ignore end end) -- if Things folder exists, watch its children local function bindThingsFolder(folder) if not folder then return end folder.ChildAdded:Connect(function(child) addThingToListIfMissing(child) end) end bindThingsFolder(workspace:FindFirstChild("Things")) -- ///////////////////////////// -- // CORE AUTO BUY LOGIC -- ///////////////////////////// -- helper to perform proximity prompt safely (executors differ) local function tryFireProximityPrompt(prompt) if not prompt then return false end local ok, res = pcall(function() -- many executors / Roblox versions expose fireproximityprompt if typeof(fireproximityprompt) == "function" then fireproximityprompt(prompt) else -- alternative remote fire: if prompt:IsA("ProximityPrompt") then prompt:InputHoldBegin() task.wait(0.05) prompt:InputHoldEnd() end end end) return ok and not res == false end local function getClosestThingFromNames(names) local folder = workspace:FindFirstChild("Things") local HRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") if not folder or not HRP then return nil end local closest, minDist = nil, math.huge for _, thingInst in ipairs(folder:GetChildren()) do -- ignore if not selected in config and if names table empty? We'll handle names logic local matches = false if names and #names > 0 then for _, rawName in ipairs(names) do local name = rawName:match("^%s*(.-)%s*$") if name ~= "" and string.find(thingInst.Name:lower(), name:lower()) then matches = true; break end end else -- if names empty -> use config.selected mapping if config.selected[thingInst.Name] then matches = true end end if matches then local part = thingInst:FindFirstChild("HumanoidRootPart") or thingInst:FindFirstChildWhichIsA("BasePart") if part then local dist = (HRP.Position - part.Position).Magnitude if dist < minDist then minDist = dist closest = thingInst end end end end return closest end local function followAndBuy(thing) local HRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") if not HRP or not thing then return end activeTarget = thing log("‚û° Going to: "..thing.Name) while running and thing.Parent and thing.Parent == workspace:FindFirstChild("Things") do local part = thing:FindFirstChild("HumanoidRootPart") or thing:FindFirstChildWhichIsA("BasePart") if not part then break end -- recalc distance local dist = (HRP.Position - part.Position).Magnitude local timeToReach = math.max(0.2, dist / math.max(1, speed)) local ok, tween = pcall(function() return TweenService:Create(HRP, TweenInfo.new(timeToReach, Enum.EasingStyle.Linear), { CFrame = part.CFrame * CFrame.new(0, 0, -2) }) end) if ok and tween then tween:Play() tween.Completed:Wait() else -- fallback: teleport HRP if executor allows pcall(function() HRP.CFrame = part.CFrame * CFrame.new(0, 0, -2) end) end -- attempt to find and fire proximity prompts inside the thing for _, descendant in ipairs(thing:GetDescendants()) do if descendant:IsA("ProximityPrompt") then -- set hold to zero for instant local ok2, _ = pcall(function() descendant.HoldDuration = 0 end) tryFireProximityPrompt(descendant) log("üí∞ Bought: "..thing.Name) end end -- small wait task.wait(0.3) end activeTarget = nil end -- main runner local runnerThread = nil local function startAutoBuy() if running then return end running = true Status.Text = "Status: RUNNING" Status.TextColor3 = Color3.fromRGB(80, 240, 120) log("‚ñ∂ AutoBuy started") -- updateKnownThings loop runnerThread = task.spawn(function() while running do -- update knownThings (for log) local folder = workspace:FindFirstChild("Things") if folder then for _, thing in ipairs(folder:GetChildren()) do if not knownThings[thing] then knownThings[thing] = true log("üîé Detected: "..thing.Name) -- add to list ui if missing addThingToListIfMissing(thing) end end end -- compute target names array from inputbox; fallback to config.selected local names = {} local raw = InputBox.Text or "" raw = tostring(raw) for part in string.gmatch(raw, "([^,]+)") do local trimmed = part:match("^%s*(.-)%s*$") if trimmed ~= "" then table.insert(names, trimmed) end end local target = getClosestThingFromNames(names) if target and not activeTarget then pcall(function() followAndBuy(target) end) end task.wait(0.5) end Status.Text = "Status: STOPPED" Status.TextColor3 = Color3.fromRGB(255, 80, 80) log("‚õî AutoBuy stopped") end) end local function stopAutoBuy() running = false activeTarget = nil end StartButton.MouseButton1Click:Connect(startAutoBuy) StopButton.MouseButton1Click:Connect(stopAutoBuy) -- ///////////////////////////// -- // Save config on exit / periodically -- ///////////////////////////// -- periodic autosave spawn(function() while true do task.wait(10) local ok, err = saveConfig(config) if ok then -- no spam in logs end end end) -- on script end (if possible) if syn and syn.protect_gui then -- nothing special end -- initial log log("UI loaded. Config file: "..CONFIG_FILENAME) log("You can open the Things list with the 'Open List' button.") -- ensure canvas sizes are right task.delay(0.6, function() refreshCanvas() pcall(function() LogBox.CanvasSize = UDim2.new(0,0,0,Logs.TextBounds.Y + 8) end) end) -- ///////////////////////////// -- // END -- /////////////////////////////
